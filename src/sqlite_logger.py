import sqlite3
from datetime import datetime

# Generated by OpenAI - to be adapted
# To do:
# - Add more information to the log entries, e.g. file name, transaction Id, etc.
# - Add more log levels, e.g. DEBUG, WARNING, etc.
# - Add a way to filter logs by date range
# - Add a way to filter logs by level
# - Add a way to filter logs by message content
# - Add a way to filter logs by transaction Id
# - Add a way to filter logs by file name
# - Collect logs in memory and write them to the database in batches

class SQLiteLogger:
    def __init__(self, db_path: str):
        """
        Initializes the SQLiteLogger with the database path.
        Creates the logs table if it doesn't exist.
        """
        self.db_path = db_path
        self._initialize_database()

    def _initialize_database(self):
        """
        Creates the logs table if it doesn't exist.
        """
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS logs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    level TEXT NOT NULL,
                    message TEXT NOT NULL
                )
            """)
            conn.commit()

    def log(self, level: str, message: str):
        """
        Inserts a log entry into the database.
        """
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO logs (timestamp, level, message)
                VALUES (?, ?, ?)
            """, (timestamp, level, message))
            conn.commit()

    def get_logs(self, level: str = None):
        """
        Retrieves logs from the database. If a level is specified, filters by level.
        """
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            if level:
                cursor.execute("SELECT * FROM logs WHERE level = ?", (level,))
            else:
                cursor.execute("SELECT * FROM logs")
            return cursor.fetchall()

# Example usage
if __name__ == "__main__":
    logger = SQLiteLogger("logs.db")
    logger.log("INFO", "This is an info message.")
    logger.log("ERROR", "This is an error message.")
    logs = logger.get_logs()
    for log in logs:
        print(log)